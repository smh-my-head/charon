' **************************************************
' * SOLIDWORKS MACRO OF ETERNAL PAIN               *
' * "I'M CRYING BLOOD" - H. FRANKS, SATISFIED USER *
' **************************************************
' vi: ft=basic
'
' Copyright (C) 2021 Ellie Clifford, Henry Franks
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU Affero General Public License as
' published by the Free Software Foundation, either version 3 of the
' License, or (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Affero General Public License for more details.
'
' You should have received a copy of the GNU Affero General Public License
' along with this program.  If not, see <https://www.gnu.org/licenses/>.

Option Explicit

' This is needed for the command line stuff
' I've found that moving it breaks everything so... don't do that?
' Also, solidworks is REALLY funny about where we break lines here
' In conclusion: don't touch
Declare PtrSafe Function lstrcpyn_long_string _
	Lib "kernel32" Alias "lstrcpynA" ( _
		ByVal DestString    As String, _
		ByVal SourcePointer As Long, _
		ByVal MaxLen        As Long _
	) _
	As Long

Declare PtrSafe Function lstrlen_long _
	Lib "kernel32" Alias "lstrlenA" ( _
		ByVal SourcePointer As Long _
	) _
	As Long

Declare PtrSafe Function GetCommandLine_long _
	Lib "kernel32" Alias "GetCommandLineA" () _
	As Long

' Entry point
Sub main()

	' Declare all our objects here
	' Note that they're generic objects and not solidworks-specific types
	' This is due to something called 'late linking', which
	'  we need if we want to keep the files in plaintext.
	' Comments after generic types show the relevant bound types
	Dim Args()         As String
	Dim swApp          As Object  ' SldWorks.SldWorks
	Dim swUtil         As Object  ' SWUtilities.gtcocswUtilities
	Dim swUtilCompGeom As Object  ' SWUtilities.gtcocswCompareGeometry
	Dim longStatus     As Long    ' gtError_e
	Dim volStatus      As Long    ' gtVolDiffStatusOptionType_e
	Dim faceStatus     As Long    ' gtVolDiffStatusOptionType_e

	' Get Solidworks and the Utilites add-on (make sure that's installed)
	Set swApp = CreateObject("SldWorks.Application")
	Set swUtil = swApp.GetAddInObject("Utilities.UtilitiesApp")

	' Check if Utilities is disabled
	If swUtil Is Nothing Then
		MsgBox "Cannot open comparison - please make sure" _
			+ "Solidworks Utilities is enabled at startup"
		Exit Sub
	End If
	' This gets the solidworks compare interface, don't ask me how
	Set swUtilCompGeom = swUtil.GetToolInterface(2, longStatus)

	' Check for errors raised getting the compare tool
	' If so, CheckErr creates a popup box, then we exit
	If CheckErr(longStatus) Then
		Exit Sub
	End If

	' We split our args based on a somewhat arbitrary delimiter,
	'  but notably one that cannot appear in any file paths
	Args = Split(GetCommandLine, " /*")

	' If file paths aren't correctly specified, warn the user and exit
	If UBound(Args) <> 2 Then
		MsgBox "Incorrect number of arguments"
		Exit Sub
	End If

	' Run the actual geometry compare
	' We can't put the comments on each line because of how VBA parses line
	'  breaks, so we call the function basically as follows:
	'
	' Function CompareGeometry3(
	'     ref file (+ empty config)
	'     mod file (+ empty config)
	'     gtGdfVolumeCompare [gtGdfOperationOption_e]
	'     gtResultShowUI [gtResultOptions_e]
	'     empty report path
	'     don't add to binder
	'     don't overwrite
	'     status variables
	' )
	longStatus = swUtilCompGeom.CompareGeometry3( _
		Args(1), "", Args(2), "", _
		1, 1, "", False, False, _
		volStatus, faceStatus _
	)

	' Create a popup box if this throws an error
	CheckErr longStatus

	' This will probably only happen in the case longStatus = -1 (unknown)
	' But we'll check regardless of the longStatus code
	If volStatus <> 0 And volStatus <> 1 Then
		MsgBox "Volume comparison error: " _
			+ Str(volStatus) + " - " + diffStatusToString(volStatus)
	End If

	' Close the geometry compare tool
	' You may think that leaving the tool open will give us a nice visual
	'  diff like the when it's used manually. This is not the case.
	' Closing the compare tool stops the program from hanging.
	If longStatus = 0 Then
		' If we haven't had an error so far, try closing
		'  the tool and return an error if it raises one
		CheckErr swUtilCompGeom.Close()
	Else
		' If we've already thrown an error, this will probably throw
		' error 7007 (gtErrCompareGeometryNotExecuted), in which case
		' there's no point in us bothering the user further
		swUtilCompGeom.Close
	End If

End Sub


Function CheckErr(status) as Boolean
	' Generic catch-all error message that will eventually
	'  make its way to my inbox, whether I like it or not

	' Check if we have a nonzero error code
	' Also exclude status code 15 (gtErrIncorrectReportPath)
	' We also return whether or not this triggers a reasonable error as a bool
	If status <> 0 And status <> 15 Then
		MsgBox "Comparison failed with exit code " + Str(status) _
			+ ". Please open an issue at " _
			+ "https://github.com/eleanor-clifford/sldworks-git-tools"
		CheckErr = True ' Assign return value
	End If

	' Default return value is False (so don't bother setting CheckErr = False)
End Function


Function diffStatusToString(status As Long) As String
	' Get a string for our gtVolDiffStatusOptionType_e error code
	' Diff status codes are fairly limited in number so we can easily
	'  create a switch like this. Creating a similar function for
	'  gtError_e would be a fool's errand.

    Select Case status
        Case 0
            diffStatusToString = "Succeeded"
        Case 1
            diffStatusToString = "Not performed"
        Case 2
            diffStatusToString = "Canceled"
        Case 3
            diffStatusToString = "Failed"
        Case 4
            diffStatusToString = "Identical parts"
        Case 5
            diffStatusToString = "Different parts"
        Case 6
            diffStatusToString = "No solid body found"
        Case 7
            diffStatusToString = "Already saved"
		Case Else
			diffStatusToString = "Undefined"
    End Select

End Function


' *****************************************************************************
' * COMMAND LINE PARSER                                                       *
' *****************************************************************************
' * Reference: https://forum.solidworks.com/docs/DOC-3861                     *
' *****************************************************************************

Function GetCommandLine() As String
	' Get a pointer to process commandline as Long
	Dim ptrCommandLine As Long
	ptrCommandLine = GetCommandLine_long
	If ptrCommandLine > 0 Then ' GetCommandLine ok
		Dim Buffer As String, BufferLength As Long
		' Get a length of the command line using Long pointer
		' Returns the length without the zero terminating char
		BufferLength = lstrlen_long(ptrCommandLine)

		If BufferLength > 0 Then
			' Allocate a space for the command line
			Buffer = Space(BufferLength + 1)

			' Copy the command line to a buffer using Long + String pointers.
			ptrCommandLine = lstrcpyn_long_string( _
				Buffer, _
				ptrCommandLine, _
				BufferLength + 1 _
			)

			' The copy SHOULD be OK. Zero means some error, not enough of space
			If ptrCommandLine > 0 Then ' lstrcpyn
				' Remove the zero terminator from the copied string
				Dim PosZero As Long
				PosZero = InStr(Buffer, Chr$(0))
				If PosZero > 0 Then Buffer = Left(Buffer, PosZero - 1)
				GetCommandLine = Buffer
			End If
		End If
	End If
End Function
